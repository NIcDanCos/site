name: Supabase Keep-Alive

# Purpose: Prevent free-tier project pausing due to inactivity
# Frequency: Every 2 days (Sun, Mon, Wed, Fri at 9 AM UTC)
# Estimated runtime: ~2 minutes per execution
# Monthly cost: ~8 minutes of GitHub Actions quota

on:
  schedule:
    # Cron: "minute hour day-of-month month day-of-week"
    # Runs at 09:00 UTC every Sunday (0), Monday (1), Wednesday (3), Friday (5)
    # Maximum gap: 2 days (71% safety buffer vs 7-day threshold)
    - cron: '0 9 * * 0,1,3,5'

  workflow_dispatch:
    # Enables manual triggering from GitHub UI
    # Useful for testing or emergency pings

# Security: Read-only permissions (principle of least privilege)
permissions:
  contents: read

jobs:
  ping-database:
    name: Query Database to Prevent Pausing
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Fail-safe: kill job if it hangs

    steps:
      # Step 1: Checkout repository (enables future extensibility)
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          sparse-checkout: |
            package.json
          sparse-checkout-cone-mode: false

      # Step 2: Setup Node.js runtime environment
      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: '20'  # LTS version
          cache: 'npm'        # Cache npm packages for faster runs

      # Step 3: Install Supabase JavaScript client
      - name: Install Supabase Client
        run: npm install @supabase/supabase-js
        env:
          NODE_ENV: production  # Skip devDependencies

      # Step 4: Execute health check query
      - name: Ping Supabase Database
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          node --no-warnings << 'SCRIPT'
          const { createClient } = require('@supabase/supabase-js');

          (async () => {
            const startTime = Date.now();

            try {
              // Initialize Supabase client
              const supabase = createClient(
                process.env.SUPABASE_URL,
                process.env.SUPABASE_ANON_KEY
              );

              console.log('üîó Connecting to Supabase...');
              console.log(`üìç Project: ${process.env.SUPABASE_URL}`);

              // Health check query: COUNT is faster than SELECT *
              // Uses head:true to avoid returning row data (minimal payload)
              const { data, error, count } = await supabase
                .from('contact_messages')
                .select('*', { count: 'exact', head: true });

              if (error) throw error;

              const duration = Date.now() - startTime;

              // Success logging
              console.log('');
              console.log('‚úÖ Supabase ping successful!');
              console.log(`üìä Contact messages in database: ${count}`);
              console.log(`‚è±Ô∏è  Query execution time: ${duration}ms`);
              console.log(`üìÖ Last activity timestamp: ${new Date().toISOString()}`);
              console.log('');
              console.log('üéØ Project will remain active for next 7 days');

              process.exit(0);
            } catch (error) {
              const duration = Date.now() - startTime;

              // Error logging
              console.error('');
              console.error('‚ùå Supabase ping failed!');
              console.error(`‚è±Ô∏è  Failed after: ${duration}ms`);
              console.error(`üî¥ Error type: ${error.name}`);
              console.error(`üìù Error message: ${error.message}`);
              console.error('');
              console.error('üìã Full error details:');
              console.error(error);
              console.error('');
              console.error('‚ö†Ô∏è  Please check:');
              console.error('   1. GitHub Secrets are configured correctly');
              console.error('   2. Supabase project is not paused manually');
              console.error('   3. contact_messages table exists');
              console.error('   4. Row Level Security allows SELECT for anon role');

              process.exit(1);
            }
          })();
          SCRIPT
